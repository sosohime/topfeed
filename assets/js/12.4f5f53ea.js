(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{170:function(t,e,r){"use strict";r.r(e);var n=r(0),i=Object(n.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"介绍"}},[t._v("介绍")]),t._v(" "),r("h2",{attrs:{id:"什么是服务器端渲染-ssr-？"}},[t._v("什么是服务器端渲染(SSR)？")]),t._v(" "),r("p",[t._v('React 是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出 React 组件，进行生成 DOM 和操作 DOM。然而，也可以将同一个组件渲染为服务器端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记"激活"为客户端上完全可交互的应用程序。')]),t._v(" "),t._m(0),t._v(" "),r("h2",{attrs:{id:"为什么使用服务器端渲染-ssr-？"}},[t._v("为什么使用服务器端渲染(SSR)？")]),t._v(" "),r("p",[t._v("与传统 SPA（Single-Page Application - 单页应用程序）相比，服务器端渲染(SSR)的优势主要在于：")]),t._v(" "),t._m(1),t._v(" "),r("p",[t._v("使用服务器端渲染(SSR)时还需要有一些权衡之处：")]),t._v(" "),t._m(2),t._v(" "),r("p",[t._v("在对你的应用程序使用服务器端渲染(SSR)之前，你应该问的第一个问题是，是否真的需要它。这主要取决于内容到达时间(time-to-content)对应用程序的重要程度。例如，如果你正在构建一个内部仪表盘，初始加载时的额外几百毫秒并不重要，这种情况下去使用服务器端渲染(SSR)将是一个小题大作之举。然而，内容到达时间(time-to-content)要求是绝对关键的指标，在这种情况下，服务器端渲染(SSR)可以帮助你实现最佳的初始加载性能。")]),t._v(" "),r("h2",{attrs:{id:"服务器端渲染-vs-预渲染-ssr-vs-prerendering"}},[t._v("服务器端渲染 vs 预渲染(SSR vs Prerendering)")]),t._v(" "),t._m(3),t._v(" "),r("p",[t._v("如果你使用 webpack，你可以使用 "),r("a",{attrs:{href:"https://github.com/chrisvfritz/prerender-spa-plugin",target:"_blank",rel:"noopener noreferrer"}},[t._v("prerender-spa-plugin"),r("OutboundLink")],1),t._v(" 轻松地添加预渲染。")]),t._v(" "),r("h2",{attrs:{id:"关于此指南"}},[t._v("关于此指南")]),t._v(" "),r("p",[t._v("本指南专注于，使用 Node.js server 的服务器端单页面应用程序渲染。")]),t._v(" "),r("p",[t._v("本指南将会非常深入，并且假设你已经熟悉 React 本身，并且具有 Node.js 和 webpack 的相当不错的应用经验。如果你倾向于使用提供了平滑开箱即用体验的更高层次解决方案，你应该去尝试使用 "),r("a",{attrs:{href:"https://github.com/zeit/next.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("Next.js"),r("OutboundLink")],1),t._v("。它建立在同等的 React 技术栈之上，但抽象出很多模板，并提供了一些额外的功能，例如静态站点生成。但是，如果你需要更直接地控制应用程序的结构，Next.js 并不适合这种使用场景。你也可以尝试"),r("a",{attrs:{href:"https://github.com/fusionjs",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fusion.js"),r("OutboundLink")],1),t._v(",其更加深度的与服务端进行结合，同时也使得其使用更加复杂，无论如何，阅读本指南将更有助于更好地了解一切如何运行。")]),t._v(" "),r("p",[t._v("当你阅读时，参考官方 "),r("a",{attrs:{href:"https://github.com/TopFeed/topfeed",target:"_blank",rel:"noopener noreferrer"}},[t._v("Topfeed Demo"),r("OutboundLink")],1),t._v(" 将会有所帮助，此示例使用了本指南涵盖的大部分技术。")])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v('服务器渲染的 React 应用程序也可以被认为是"同构"或"通用"，因为应用程序的大部分代码都可以在'),e("strong",[this._v("服务器")]),this._v("和"),e("strong",[this._v("客户端")]),this._v("上运行。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("更好的 SEO，由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面。")]),this._v(" "),e("p",[this._v("请注意，截至目前，Google 和 Bing 可以很好对同步 JavaScript 应用程序进行索引。在这里，同步是关键。如果你的应用程序初始展示 loading 菊花图，然后通过 Ajax 获取内容，抓取工具并不会等待异步完成后再行抓取页面内容。也就是说，如果 SEO 对你的站点至关重要，而你的页面又是异步获取内容，则你可能需要服务器端渲染(SSR)解决此问题。")])]),this._v(" "),e("li",[e("p",[this._v("更快的内容到达时间(time-to-content)，特别是对于缓慢的网络情况或运行缓慢的设备。无需等待所有的 JavaScript 都完成下载并执行，才显示服务器渲染的标记，所以你的用户将会更快速地看到完整渲染的页面。通常可以产生更好的用户体验，并且对于那些「内容到达时间(time-to-content)与转化率直接相关」的应用程序而言，服务器端渲染(SSR)至关重要。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("p",[this._v("开发条件所限。浏览器特定的代码，只能在某些生命周期钩子函数(lifecycle hook)中使用；一些外部扩展库(external library)可能需要特殊处理，才能在服务器渲染应用程序中运行。")])]),this._v(" "),e("li",[e("p",[this._v("涉及构建设置和部署的更多要求。与可以部署在任何静态文件服务器上的完全静态单页面应用程序(SPA)不同，服务器渲染应用程序，需要处于 Node.js server 运行环境。")])]),this._v(" "),e("li",[e("p",[this._v("更多的服务器端负载。在 Node.js 中渲染完整的应用程序，显然会比仅仅提供静态文件的 server 更加大量占用 CPU 资源(CPU-intensive - CPU 密集)，因此如果你预料在高流量环境(high traffic)下使用，请准备相应的服务器负载，并明智地采用缓存策略。")])])])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("p",[t._v("如果你调研服务器端渲染(SSR)只是用来改善少数营销页面（例如 "),r("code",[t._v("/")]),t._v(", "),r("code",[t._v("/about")]),t._v(", "),r("code",[t._v("/contact")]),t._v(" 等）的 SEO，那么你可能需要"),r("strong",[t._v("预渲染")]),t._v("。无需使用 web 服务器实时动态编译 HTML，而是使用预渲染方式，在构建时(build time)简单地生成针对特定路由的静态 HTML 文件。优点是设置预渲染更简单，并可以将你的前端作为一个完全静态的站点。")])}],!1,null,null,null);i.options.__file="README.md";e.default=i.exports}}]);